"""
Django settings for careerproject project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)$(#4!yj7#t74i&kxyrrt2oi#xxs_ogx&jg9mq57qlww2i=i-y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = ['localhost', '127.0.0.1','localhost:3100','localhost:3000']
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3100",
    "http://localhost:3000",
    "http://localhost:3001",
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS  # Ensures consistency

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    # Add other allowed origins as needed
]

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]
CORS_ALLOW_CREDENTIALS = True  # If cookies/auth tokens need to be sent

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # Third-party
    'corsheaders',
    'django_celery_results',
    'django_celery_beat',
    'rest_framework',
    'django_filters',
    'rest_framework_simplejwt',
    # Local apps
    'users',
    'careers',
    'feedback',
    'course',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'careerproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


EMAIL_TEMPLATES = {
    'SIGNUP': {
        'subject': 'Welcome to The Questors',
        'template_name': 'signup_email'
    },
    'PASSWORD_RESET': {
        'subject': 'Password Reset Request',
        'template_name': 'password_reset_email'
    }
}

WSGI_APPLICATION = 'careerproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'thequestors'),
        'USER': os.getenv('DB_USER', 'postgres'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'GABU#briel1'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



QUESTORS_URL ="https://thequestors.com"
QUESTORS_URL_API ="https://thequestors.com/api/v1/"
#QUESTORS_URL ="http://localhost:3000"
#QUESTORS_URL_API="http://localhost:3000/api/v1/"

GOOGLE_OAUTH2_CLIENT_ID = '563635898415-qjjun94a9ef9sm8na1q3bgtialba06qq.apps.googleusercontent.com'
GOOGLE_OAUTH2_CLIENT_SECRET = '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'  # Only needed for server-side flow

EMAIL_URL    ="https://api.zeptomail.com/v1.1/email"
EMAIL_TEMPLATES_URL="https://api.zeptomail.com/v1.1/email/template"
EMAIL_SENDER ="noreply@lautech.edu.ng"
EMAIL_TOKEN  ="Zoho-enczapikey wSsVR61xqxSkCad+yGarcrxtyl4ABA73FU4o2FXy7yD1T//G88c5xhHKDAP2G/dMQzY8FzEQpr18nhtS22BditV7z1oHDiiF9mqRe1U4J3x17qnvhDzOXW1YlReNJYMBwwVsnmBlFcsq+g=="
EMAIL_TEMPLATES_KEY="2d6f.7712171af2cd96e.k1.daa0eb10-526c-11f0-8c4e-86f7e6aa0425.197ab7d1c41"
TEMPLATE_KEY_RESET ="2d6f.7712171af2cd96e.k1.0c773ec0-5400-11f0-9fdd-522b4d8f9316.197b5cf7cac"

SOCIAL_AUTH_FACEBOOK_KEY = '1321201456110086'
SOCIAL_AUTH_FACEBOOK_SECRET = 'fa68f56bea2c8deb51b1f09469619ea7'

FACEBOOK_APP_ID = SOCIAL_AUTH_FACEBOOK_KEY
FACEBOOK_APP_SECRET = SOCIAL_AUTH_FACEBOOK_SECRET


AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # Add any social auth backends if using
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'users.CustomUser'

# REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],

}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}

SITE_ID = 1  # Required for social authentication
# CORS
CORS_ALLOW_ALL_ORIGINS = True  # For development only
# Celery
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
CELERY_CACHE_BACKEND = 'django-cache'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Media files (for user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# AI Model paths
MODEL_PATHS = {
    'hobby_classifier': os.path.join(BASE_DIR, 'models/hobby_classifier'),
    'skill_extractor': os.path.join(BASE_DIR, 'models/skill_extractor'),
}